<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Java on Michał Kowol</title>
    <link>https://michalkowol.github.io/categories/java/</link>
    <description>Recent content in Java on Michał Kowol</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 23 Jan 2017 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://michalkowol.github.io/categories/java/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>How to deserialize abstract types from JSON using Jackson?</title>
      <link>https://michalkowol.github.io/posts/2017-01-23-jackson/</link>
      <pubDate>Mon, 23 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>https://michalkowol.github.io/posts/2017-01-23-jackson/</guid>
      <description>Overview Sometimes you need deserialize JSON to Java abstract types. Good example is list of animals.
{ &amp;quot;animals&amp;quot;: [ { &amp;quot;name&amp;quot;: &amp;quot;Szarik&amp;quot;, &amp;quot;ageInYears&amp;quot;: 3, &amp;quot;type&amp;quot;: &amp;quot;dog&amp;quot; }, { &amp;quot;name&amp;quot;: &amp;quot;Filemon&amp;quot;, &amp;quot;livesLeft&amp;quot;: 6, &amp;quot;type&amp;quot;: &amp;quot;cat&amp;quot; } ] }  In this case you need to serialize animals to specific types using type property.
Java Data Classes (Lombock) import lombok.Data; interface Animal { } @Data class AnimalsContainer { private final List&amp;lt;Animal&amp;gt; animals = new LinkedList&amp;lt;&amp;gt;(); } @Data class Dog implements Animal { private final String name; private final Integer ageInYears; } @Data class Cat implements Animal { private final String name; private final Integer livesLeft; }  Json Type Info Annotations import com.</description>
    </item>
    
    <item>
      <title>Simple HTTP servers in Java</title>
      <link>https://michalkowol.github.io/posts/2016-12-01-java-simple-http-servers/</link>
      <pubDate>Thu, 01 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>https://michalkowol.github.io/posts/2016-12-01-java-simple-http-servers/</guid>
      <description>Java build-in Since Java SE 6, there&amp;rsquo;s a builtin HTTP server in Sun Oracle JRE. The com.sun.net.httpserver package summary outlines the involved classes and contains examples.
import com.sun.net.httpserver.HttpExchange; import com.sun.net.httpserver.HttpHandler; import com.sun.net.httpserver.HttpServer; import lombok.SneakyThrows; import java.io.IOException; import java.io.OutputStream; import java.net.InetSocketAddress; public class BootSunHttp { public static void main(String[] args) { new BootSunHttp().bootServer(); } @SneakyThrows private void bootServer() { HttpServer server = HttpServer.create(new InetSocketAddress(8000), 0); server.createContext(&amp;quot;/test&amp;quot;, new SimpleHandler()); server.setExecutor(null); // creates a default executor server.</description>
    </item>
    
    <item>
      <title>Java with Spring</title>
      <link>https://michalkowol.github.io/posts/2013-12-05-java-with-spring/</link>
      <pubDate>Thu, 05 Dec 2013 00:00:00 +0000</pubDate>
      
      <guid>https://michalkowol.github.io/posts/2013-12-05-java-with-spring/</guid>
      <description>Overview Post bellow refers to the old version of Spring. In modern Spring application you don&amp;rsquo;t need to write xml files. You can do almost everything from java code.
Example interface Fruit { String eat(); String getName(); } interface Peelable { String peel(); } interface PeelableFruit extends Fruit, Peelable { } class Apple implements PeelableFruit { @Override public String peel() { return &amp;quot;peeling &amp;quot; + getName(); } @Override public String eat() { return &amp;quot;omnonnom &amp;quot; + getName(); } @Override public String getName() { return &amp;quot;apple&amp;quot;; } } class Peeler { String peel(Peelable peelable) { return peelable.</description>
    </item>
    
    <item>
      <title>Java Puzzle - initialization order</title>
      <link>https://michalkowol.github.io/posts/2013-11-22-java-puzzle/</link>
      <pubDate>Fri, 22 Nov 2013 00:00:00 +0000</pubDate>
      
      <guid>https://michalkowol.github.io/posts/2013-11-22-java-puzzle/</guid>
      <description>Overview When I applied my first full-time job, a guy during recruitment showed me the following code and asked me what would happen? It supposed to show if I understand initialization order in Java.
Example class ClassMain { private final String mainVar = &amp;quot;Main&amp;quot;; ClassMain() { showMeTheMain(); } protected void showMeTheMain() { System.out.println(mainVar); } } class ClassA extends ClassMain { private String a = &amp;quot;qwerty&amp;quot;; ClassA() { showMeTheMain(); } @Override public void showMeTheMain() { System.</description>
    </item>
    
  </channel>
</rss>