<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Michał Kowol | Tech Blog</title>
    <link>https://michalkowol.github.io/categories/javascript/index.xml</link>
    <description>Recent content on Michał Kowol | Tech Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="https://michalkowol.github.io/categories/javascript/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Scala traits in javascript</title>
      <link>https://michalkowol.github.io/posts/traits-in-javascript/</link>
      <pubDate>Thu, 23 Oct 2014 00:00:00 +0000</pubDate>
      
      <guid>https://michalkowol.github.io/posts/traits-in-javascript/</guid>
      <description>&lt;p&gt;Traits:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function _extend(object, source) {
    for (var key in source) {
        if (source.hasOwnProperty(key)) {
            object[key] = source[key];
        }
    }
    return object;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function _with() {
    var self = {};
    var args = Array.prototype.slice.call(arguments);
    for (var i = 0; i &amp;lt; args.length; i++) {
        args[i](self);
    }
    self.super = _extend({}, self);
    return self;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Traits example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var mtv = (function (mtv) {
    &#39;use strict&#39;;
 
    mtv.TraitA = function (self) {
        self.functionA = function () {
            console.log(&#39;[start]: TraitA.functionA&#39;);
            console.log(self.getModel());
            console.log(&#39;[end]: TraitA.functionA&#39;);
        };
 
        self.dummyModel = function () {
            console.log(&#39;[start]: TraitA.dummyModel&#39;);
            console.log(&#39;[end]: TraitA.dummyModel&#39;);
        };
    };
 
    mtv.TraitB = function (self) {
        self.functionB = function () {
            console.log(&#39;[start]: TraitB.functionB&#39;);
            console.log(self.getModel());
            console.log(&#39;[end]: TraitB.functionB&#39;);
        };
 
        self.dummyModel = function () {
            console.log(&#39;[start]: TraitB.dummyModel&#39;);
            console.log(&#39;[end]: TraitB.dummyModel&#39;);
        };
 
        self.onlyB = function () {
            console.log(&#39;[start]: TraitB.onlyB&#39;);
            console.log(&#39;[end]: TraitB.onlyB&#39;);
        };
    };
 
    mtv.classWithTraitATraitB = function (model) {
        var self = _with(mtv.TraitA, mtv.TraitB);
 
        self.getModel = function () {
            console.log(&#39;[start]: classWithTraitATraitB.getModel&#39;);
            console.log(&#39;[end]: classWithTraitATraitB.getModel&#39;);
            return model;
        };
 
        self.functionB = function () {
            console.log(&#39;[start]: classWithTraitATraitB.functionB&#39;);
            self.super.functionB();
            self.functionA();
            console.log(&#39;[end]: classWithTraitATraitB.functionB&#39;);
        };
 
        return self;
    };
 
    var classA = mtv.classWithTraitATraitB(&#39;model&#39;);
    classA.functionA();
    classA.functionB();
    classA.dummyModel();
    return mtv;
})(mtv || {});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Result:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[start]: TraitA.functionA
[start]: classWithTraitATraitB.getModel
[end]: classWithTraitATraitB.getModel
model
[end]: TraitA.functionA
[start]: classWithTraitATraitB.functionB
[start]: TraitB.functionB
[start]: classWithTraitATraitB.getModel
[end]: classWithTraitATraitB.getModel
model
[end]: TraitB.functionB
[start]: TraitA.functionA
[start]: classWithTraitATraitB.getModel
[end]: classWithTraitATraitB.getModel
model
[end]: TraitA.functionA
[end]: classWithTraitATraitB.functionB
[start]: TraitB.dummyModel
[end]: TraitB.dummyModel
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>&#34;Closures&#34; in JavaScript</title>
      <link>https://michalkowol.github.io/posts/closures-in-javascript/</link>
      <pubDate>Tue, 22 Jul 2014 00:00:00 +0000</pubDate>
      
      <guid>https://michalkowol.github.io/posts/closures-in-javascript/</guid>
      <description>&lt;p&gt;Closures in JS can simulate classes. Polymorphism, encapsulation and inheritance are avilable in this aproach.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function _extend(object, source) {
    for (var key in source) {
        if (source.hasOwnProperty(key)) {
            object[key] = source[key];
        }
    }
    return object;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var mtv = (function (mtv) {
    &#39;use strict&#39;;
 
    mtv.ClassA = function (a) {
        var self = {};
        self.a = a;
 
        function privateInA () {
            console.log(&#39;ClassA.privateInA.start&#39;);
            console.log(self.a);
            console.log(&#39;ClassA.privateInA.end&#39;);
        }
 
        self.bar = function () {
            console.log(&#39;ClassA.bar.start&#39;);
            self.foo();
            privateInA();
            console.log(&#39;ClassA.bar.end&#39;);
        };
 
        self.foo = function () {
            console.log(&#39;ClassA.foo.start&#39;);
            console.log(self.a);
            console.log(&#39;ClassA.foo.end&#39;);
        };
 
        self.changeA = function () {
            console.log(&#39;ClassA.changeA.start&#39;);
            self.a = self.a + &#39; Kowol&#39;;
            console.log(&#39;ClassA.changeA.end&#39;);
        };
 
        return self;
    };
 
    mtv.ClassB = function (b) {
        var self = mtv.ClassA(b);
        var _super = _extend({}, self);
        self.b = b;
 
        self.foo = function () {
            console.log(&#39;ClassB.foo.start&#39;);
            console.log(self.b + &#39; &#39; + self.a);
            _super.foo();
            console.log(&#39;ClassB.foo.end&#39;);
        };
 
        return self;
    };
 
    return mtv;
})(mtv || {});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var classB = mtv.ClassB(&#39;Michal&#39;);
classB.foo();       // ClassB.foo.start
                    // Michal Michal
                    // ClassA.foo.start
                    // Michal
                    // ClassA.foo.end
                    // ClassB.foo.end
 
classB.bar();       // ClassA.bar.start
                    // ClassB.foo.start
                    // Michal Michal
                    // ClassA.foo.start
                    // Michal
                    // ClassA.foo.end
                    // ClassB.foo.end
                    // ClassA.privateInA.start
                    // Michal
                    // ClassA.privateInA.end
                    // ClassA.bar.end
 
classB.changeA();   // ClassA.changeA.start
                    // ClassA.changeA.end
 
classB.bar();       // ClassA.bar.start
                    // ClassB.foo.start
                    // Michal Michal Kowol
                    // ClassA.foo.start
                    // Michal Kowol
                    // ClassA.foo.end
                    // ClassB.foo.end
                    // ClassA.privateInA.start
                    // Michal Kowol
                    // ClassA.privateInA.end
                    // ClassA.bar.end
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>&#34;Classes&#34; and Singletions in JavaScript</title>
      <link>https://michalkowol.github.io/posts/classes-and-singletions-in-javascript/</link>
      <pubDate>Thu, 24 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>https://michalkowol.github.io/posts/classes-and-singletions-in-javascript/</guid>
      <description>&lt;p&gt;In JS there are a lot of way to simulate classes. Here are examples:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var com = com || {};

com.MTVClass1 = function (videoID) {
    &amp;quot;use strict&amp;quot;;
    var self = {};
 
    function bar() {
        return &amp;quot;bar&amp;quot; + videoID;
    }
 
    self.foo = function () {
        return &amp;quot;foo&amp;quot; + bar() + videoID;
    };
 
    return self;
};
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;com.MTVClass1(&amp;quot;123&amp;quot;).foo();
view rawMTVClass1.js hosted with ❤ by GitHub
var com = com || {};
 
(function () {
    &#39;use strict&#39;;
 
    com.MTVClass2 = function (videoID) {
        this.videoID = videoID;
    };
 
    function bar() {
        return &amp;quot;bar&amp;quot;; // does not have access to videoID
    }
 
    com.MTVClass2.prototype.foo = function () {
        return &amp;quot;foo&amp;quot; + bar() + this.videoID;
    };
}());
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;new com.MTVClass2(&amp;quot;1234&amp;quot;).foo();
view rawMTVClass2.js hosted with ❤ by GitHub
var com = com || {};
 
com.MTVClass3 = (function () {
    &#39;use strict&#39;;
 
    function MTVClass3(videoID) {
        this.videoID = videoID;
    }
 
    function bar() {
        return &amp;quot;bar&amp;quot;;  // does not have access to videoID
    }
 
    MTVClass3.prototype.foo = function () {
        return &amp;quot;foo&amp;quot; + bar() + this.videoID;
    };
 
    return MTVClass3;
}());
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;new com.MTVClass3(&amp;quot;123&amp;quot;).foo();
view rawMTVClass3.js hosted with ❤ by GitHub
var com = com || {};
 
com.MTVClass4 = (function () {
    &#39;use strict&#39;;
 
    function MTVClass4(videoID) {
        this.videoID = videoID;
    }
 
    function bar(self) {
        return &amp;quot;bar&amp;quot; + self.videoID;
    }
 
    MTVClass4.prototype.foo = function () {
        return &amp;quot;foo&amp;quot; + bar(this) + this.videoID;
    };
 
    return MTVClass4;
}());
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;new com.MTVClass4(&amp;quot;123&amp;quot;).foo();
view rawMTVClass4.js hosted with ❤ by GitHub
var com = com || {};
 
com.MTVObject = (function () {
    &amp;quot;use strict&amp;quot;;
    var self = {};
 
    function bar() {
        return &amp;quot;bar&amp;quot;;
    }
 
    self.foo = function () {
        return &amp;quot;foo&amp;quot; + bar();
    };
 
    return self;
}());
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;com.MTVObject.foo();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In my option &lt;code&gt;MTVClass1.js&lt;/code&gt; approach is the best one. &lt;code&gt;MTVClass1.js&lt;/code&gt; has similar concept like &lt;code&gt;MTVObject.js&lt;/code&gt;. In &lt;code&gt;MTVClass2.js&lt;/code&gt; and &lt;code&gt;MTVClass3.js&lt;/code&gt; you do not have access to class fields. &lt;code&gt;MTVClass1.js&lt;/code&gt; has some small performance issue, but remeber:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Premature optimization is the root of all evil.&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
  </channel>
</rss>