<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts-rsses on </title>
    <link>https://michalkowol.github.io/posts/index.xml</link>
    <description>Recent content in Posts-rsses on </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 10 Dec 2016 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://michalkowol.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Photo to scan in Photoshop</title>
      <link>https://michalkowol.github.io/posts/2016-12-10-photo-to-scan-in-photoshop/</link>
      <pubDate>Sat, 10 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>https://michalkowol.github.io/posts/2016-12-10-photo-to-scan-in-photoshop/</guid>
      <description>

&lt;h2 id=&#34;photo-to-scan-in-photoshop&#34;&gt;Photo to scan in Photoshop&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;img src=&#34;https://michalkowol.github.io/img/photo-to-scan-in-photoshop/perspective-crop-tool.png&#34; alt=&#34;Perspective Crop Tool&#34; /&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Layer &amp;gt; New Adjustment Layer &amp;gt; Gradient Map&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Layer &amp;gt; New Adjustment Layer &amp;gt; Levels&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;links&#34;&gt;Links&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://tricky-photoshop.com/make-document-looks-like-scanned-copy-photoshop/&#34;&gt;http://tricky-photoshop.com/make-document-looks-like-scanned-copy-photoshop/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>User management in Linux</title>
      <link>https://michalkowol.github.io/posts/2016-12-12-user-management/</link>
      <pubDate>Sat, 10 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>https://michalkowol.github.io/posts/2016-12-12-user-management/</guid>
      <description>

&lt;h2 id=&#34;add-delete-users-and-groups&#34;&gt;Add, delete users and groups&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;addgroup groupname&lt;/code&gt; - creates new group&lt;/li&gt;
&lt;li&gt;&lt;code&gt;adduser username&lt;/code&gt; - creates new user&lt;/li&gt;
&lt;li&gt;&lt;code&gt;usermod -a -G groupname username&lt;/code&gt; - adds existing user to existing group&lt;/li&gt;
&lt;li&gt;&lt;code&gt;deluser username&lt;/code&gt; - deletes user&lt;/li&gt;
&lt;li&gt;&lt;code&gt;groups username&lt;/code&gt; - list all groups for user&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;chmod&#34;&gt;chmod&lt;/h2&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Mode&lt;/th&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;r&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;read&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;w&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;write&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;x&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;execute&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;X&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;special execute&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;s&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;setuid/gid&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;t&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;sticky&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Reference&lt;/th&gt;
&lt;th&gt;Class&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;u&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;owner&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;g&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;group&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;o&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;others&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;a&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;all&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Operator&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;+&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;adds the specified modes to the specified classes&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;removes the specified modes from the specified classes&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;=&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;the modes specified are to be made the exact modes for the specified classes&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&#34;files-permissions&#34;&gt;Files permissions&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;chown -R username:groupname path&lt;/code&gt; - changes file/directory owner and its group&lt;/li&gt;
&lt;li&gt;&lt;code&gt;chown -R :groupname path&lt;/code&gt; - changes file/directory group&lt;/li&gt;
&lt;li&gt;&lt;code&gt;chmod -R a-x+X path&lt;/code&gt; - remove the execute permission on all files in a directory tree, while allowing for directory browsing&lt;/li&gt;
&lt;li&gt;&lt;code&gt;chmod -R a+X directory&lt;/code&gt; - allowing for directory browsing for all&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;links&#34;&gt;Links&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://kb.iu.edu/d/abdb&#34;&gt;In Unix, how do I change the permissions for a file?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;style&gt;
table { width: auto; }
&lt;/style&gt;
</description>
    </item>
    
    <item>
      <title>Simple HTTP servers in Java</title>
      <link>https://michalkowol.github.io/posts/2016-12-01-java-simple-http-servers/</link>
      <pubDate>Thu, 01 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>https://michalkowol.github.io/posts/2016-12-01-java-simple-http-servers/</guid>
      <description>

&lt;h2 id=&#34;java-build-in&#34;&gt;Java build-in&lt;/h2&gt;

&lt;p&gt;Since Java SE 6, there&amp;rsquo;s a builtin HTTP server in &lt;del&gt;Sun&lt;/del&gt; Oracle JRE. The com.sun.net.httpserver package summary outlines the involved classes and contains examples.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;import com.sun.net.httpserver.HttpExchange;
import com.sun.net.httpserver.HttpHandler;
import com.sun.net.httpserver.HttpServer;
import lombok.SneakyThrows;

import java.io.IOException;
import java.io.OutputStream;
import java.net.InetSocketAddress;

public class BootSunHttp {

    public static void main(String[] args) {
        new BootSunHttp().bootServer();
    }

    @SneakyThrows
    private void bootServer() {
        HttpServer server = HttpServer.create(new InetSocketAddress(8000), 0);
        server.createContext(&amp;quot;/test&amp;quot;, new SimpleHandler());
        server.setExecutor(null); // creates a default executor
        server.start();
    }

    private static class SimpleHandler implements HttpHandler {

        @Override
        public void handle(HttpExchange t) throws IOException {
            String response = &amp;quot;This is the response&amp;quot;;
            t.sendResponseHeaders(200, response.length());
            OutputStream os = t.getResponseBody();
            os.write(response.getBytes());
            os.close();
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Noted should be that the response.length() part in their example is bad, it should have been response.getBytes().length. Even then, the getBytes() method must explicitly specify the charset which you then specify in the response header. Alas, albeit misguiding to starters, it&amp;rsquo;s after all just a basic kickoff example.&lt;/p&gt;

&lt;p&gt;As to using &lt;code&gt;com.sun.*&lt;/code&gt; classes, do note that this is, in contrary to what some developers think, absolutely not forbidden by the well known FAQ &lt;a href=&#34;http://www.oracle.com/technetwork/java/faq-sun-packages-142232.html&#34;&gt;Why Developers Should Not Write Programs That Call &amp;lsquo;sun&amp;rsquo; Packages&lt;/a&gt;. That FAQ concerns the sun.* package (such as sun.misc.BASE64Encoder) for internal usage by the Oracle JRE (which would thus kill your application when you run it on a different JRE), not the com.sun.* package. Sun/Oracle also just develop software on top of the Java SE API themselves like as every other company such as Apache and so on. Using com.sun.* classes is only discouraged (but not forbidden) when it concerns an implementation of a certain Java API, such as GlassFish (Java EE impl), Mojarra (JSF impl), Jersey (JAX-RS impl), etc.&lt;/p&gt;

&lt;h2 id=&#34;spark&#34;&gt;Spark&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;import spark.Request;
import spark.Response;
import spark.Route;

import static spark.Spark.get;
import static spark.Spark.port;

public class BootSparkHttp {

    private final BarHandler barHandler = new BarHandler();

    public static void main(String[] args) {
        new BootSparkHttp().run();
    }

    private void run() {
        port(8080);
        get(&amp;quot;/hello&amp;quot;, (request, response) -&amp;gt; &amp;quot;Hello World!&amp;quot;);
        get(&amp;quot;/foo/:id&amp;quot;, this::foo);
        get(&amp;quot;/bar/:id&amp;quot;, barHandler);
    }

    private String foo(Request request, Response response) throws Exception {
        String id = request.params(&amp;quot;:id&amp;quot;);
        response.type(&amp;quot;application/json&amp;quot;);
        return &amp;quot;{\&amp;quot;foo\&amp;quot;: \&amp;quot;&amp;quot; + id + &amp;quot;\&amp;quot;}&amp;quot;;
    }

    private static class BarHandler implements Route {
        @Override
        public String handle(Request request, Response response) throws Exception {
            String id = request.params(&amp;quot;:id&amp;quot;);
            return &amp;quot;bar=&amp;quot; + id;
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;references&#34;&gt;References&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://stackoverflow.com/questions/3732109/simple-http-server-in-java-using-only-java-se-api&#34;&gt;simple HTTP server in Java using only Java SE API&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://sparkjava.com/&#34;&gt;Spark Framework - A tiny Java web framework&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>/boot 100% and can&#39;t purge</title>
      <link>https://michalkowol.github.io/posts/2016-11-07-linux-headers/</link>
      <pubDate>Mon, 07 Nov 2016 00:00:00 +0000</pubDate>
      
      <guid>https://michalkowol.github.io/posts/2016-11-07-linux-headers/</guid>
      <description>

&lt;h2 id=&#34;solution&#34;&gt;Solution&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;sudo apt-get install&lt;/code&gt; &amp;ndash;fix-broken should fail but list unused packets&lt;/li&gt;
&lt;li&gt;free them one by one using sudo &lt;code&gt;dpkg --purge ...&lt;/code&gt;. If a packet refuse to uninstall due to dependencies, just advance to the next one.&lt;/li&gt;
&lt;li&gt;After uninstalling everything you could, &lt;code&gt;sudo apt-get install --fix-broken&lt;/code&gt; again, and this time it should work.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;So, after upgrading kernels and rebooting to test it, you can remove all other kernels with:&lt;/p&gt;

&lt;p&gt;To list all installed kernels, run:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;dpkg -l linux-image-\* | grep ^ii
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Command to show all kernels and headers that can be removed, excluding the current running kernel:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;kernelver=$(uname -r | sed -r &#39;s/-[a-z]+//&#39;)
dpkg -l linux-{image,headers}-&amp;quot;[0-9]*&amp;quot; | awk &#39;/ii/{print $2}&#39; | grep -ve $kernelver
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So, after upgrading kernels and rebooting to test it, you can remove all other kernels with:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo apt-get purge $(dpkg -l linux-{image,headers}-&amp;quot;[0-9]*&amp;quot; | awk &#39;/ii/{print $2}&#39; | grep -ve &amp;quot;$(uname -r | sed -r &#39;s/-[a-z]+//&#39;)&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;links&#34;&gt;Links&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://askubuntu.com/questions/89710/how-do-i-free-up-more-space-in-boot&#34;&gt;How do I free up more space in /boot?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://askubuntu.com/questions/337456/boot-100-and-cant-purge&#34;&gt;/boot 100% and can&amp;rsquo;t purge&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>How to server cifi shared folder using nginx.</title>
      <link>https://michalkowol.github.io/posts/2016-11-07-cifs/</link>
      <pubDate>Mon, 07 Nov 2016 00:00:00 +0000</pubDate>
      
      <guid>https://michalkowol.github.io/posts/2016-11-07-cifs/</guid>
      <description>

&lt;h2 id=&#34;setup&#34;&gt;Setup&lt;/h2&gt;

&lt;p&gt;Create folder &lt;code&gt;/media/storage/dir/&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mkdir -p /media/storage/dir/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next, mount shared directory. &lt;code&gt;uid&lt;/code&gt; and &lt;code&gt;gid&lt;/code&gt; are very important because without this you will get &lt;code&gt;403 Forbidden&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo mount -t cifs -o uid=www-data,gid=www-data,ro,username=username,password=password //10.0.0.2/shared/ /media/storage/dir/
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;-t cifs&lt;/code&gt; - type of fs (&lt;code&gt;cifs&lt;/code&gt; - Common Internet File System, also known as &lt;code&gt;smb&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;uid&lt;/code&gt; - specific user&lt;/li&gt;
&lt;li&gt;&lt;code&gt;gid&lt;/code&gt; - specific groutp&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ro&lt;/code&gt; - read-only&lt;/li&gt;
&lt;li&gt;&lt;code&gt;rw&lt;/code&gt; - read-write&lt;/li&gt;
&lt;li&gt;&lt;code&gt;username&lt;/code&gt; - shared directory username&lt;/li&gt;
&lt;li&gt;&lt;code&gt;password&lt;/code&gt; - shared directory password&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Modify &lt;code&gt;nginx&lt;/code&gt; config (&lt;code&gt;/etc/nginx/sites-available/somefile&lt;/code&gt;)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;location /{ 
   root /media/storage/dir/; 
   autoindex on;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;password-protecion&#34;&gt;Password protecion&lt;/h3&gt;

&lt;p&gt;Add user &lt;code&gt;bob&lt;/code&gt; to &lt;code&gt;.htpasswd&lt;/code&gt; file using this command:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo sh -c &amp;quot;echo -n &#39;bob:&#39; &amp;gt;&amp;gt; /etc/nginx/.htpasswd&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Add an encrypted password for the username:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo sh -c &amp;quot;openssl passwd -apr1 &amp;gt;&amp;gt; /etc/nginx/.htpasswd&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Add this to &lt;code&gt;ngnix&lt;/code&gt; config:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;location / { 
  root /media/storage/dir/;
  autoindex on;
  auth_basic &amp;quot;Restricted Content&amp;quot;;
  auth_basic_user_file /etc/nginx/.htpasswd;
  disable_symlinks off;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;links&#34;&gt;Links&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.digitalocean.com/community/tutorials/how-to-set-up-password-authentication-with-nginx-on-ubuntu-14-04&#34;&gt;How To Set Up Password Authentication with Nginx&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.digitalocean.com/community/tutorials/how-to-set-up-an-nfs-mount-on-ubuntu-16-04&#34;&gt;How To Set Up an NFS Mount&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://wiki.qnap.com/wiki/Mounting_an_NFS_share_on_Ubuntu&#34;&gt;Mounting an NFS share on Ubuntu&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://superuser.com/questions/320415/linux-mount-device-with-specific-user-rights&#34;&gt;Linux - Mount device with specific user rights&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://unix.stackexchange.com/questions/68079/mount-cifs-network-drive-write-permissions-and-chown&#34;&gt;Mount cifs Network Drive: write permissions and chown&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Set locale on your linux</title>
      <link>https://michalkowol.github.io/posts/2016-11-07-locale/</link>
      <pubDate>Mon, 07 Nov 2016 00:00:00 +0000</pubDate>
      
      <guid>https://michalkowol.github.io/posts/2016-11-07-locale/</guid>
      <description>

&lt;h3 id=&#34;locale&#34;&gt;Locale&lt;/h3&gt;

&lt;p&gt;check which locales are supported:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;locale -a
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;add the locales you want (for example ru):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo locale-gen ru_RU
sudo locale-gen ru_RU.UTF-8
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;run this update comand&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo update-locale 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;http://askubuntu.com/questions/76013/how-do-i-add-locale-to-ubuntu-server&#34;&gt;How do I add locale to ubuntu server?&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Samba (smb)</title>
      <link>https://michalkowol.github.io/posts/2016-11-04-smb-howto/</link>
      <pubDate>Fri, 04 Nov 2016 00:00:00 +0000</pubDate>
      
      <guid>https://michalkowol.github.io/posts/2016-11-04-smb-howto/</guid>
      <description>

&lt;h2 id=&#34;configuration&#34;&gt;Configuration&lt;/h2&gt;

&lt;p&gt;On Ubuntu configuration file is located in &lt;code&gt;/etc/samba/smb.conf&lt;/code&gt;. You need &lt;code&gt;root&lt;/code&gt; privileges to edit it.&lt;/p&gt;

&lt;h3 id=&#34;sample-file&#34;&gt;Sample file&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-nohighlight&#34;&gt;[global]
  workgroup = WORKGROUP
  server string = servername
  unix password sync = yes
  access based share enum = yes

[homes]
  comment = Home Directories
  browseable = no
  read only = no
  writable = yes
  guest ok = no
  create mask = 0600
  directory mask = 0700
  security = user

[accounting]
  comment = Accounting Department Directory
  writable = yes
  valid users = @account
  path = /media/storage/accounting
  create mask = 0660
  directory mode = 0770
  force group = account

[public]
  comment = Public
  browsable = yes
  path = /media/storage/public
  public = yes
  read only = no
  writable = yes
  guest ok = yes
  create mask = 0666
  directory mode = 0777
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You need to set public storage directory permissions to be &lt;code&gt;777 (drwxrwxrwx)&lt;/code&gt; and for directories shared in group &lt;code&gt;770 (drwxrwx---)&lt;/code&gt;. Don&amp;rsquo;t forget to change group of shared directories with &lt;code&gt;chown -R :groupname path&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This is how we can create group &lt;code&gt;account&lt;/code&gt; and add &lt;code&gt;bob&lt;/code&gt; to &lt;code&gt;account&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;groupadd account
adduser bob
usermod -a -G account bob
smbpasswd -a bob

&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;configuring-anonymous-public-shares&#34;&gt;Configuring anonymous public shares&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-nohighlight&#34;&gt;[public]
  comment = Public
  browsable = yes
  path = /media/storage/public
  public = yes
  read only = no
  writable = no
  write list = bob
  guest ok = yes
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This sets up a share named &lt;code&gt;public&lt;/code&gt; which is shown when browsing the server to any user with rights to do so. You can see it is public, but not writable except for &lt;code&gt;bob&lt;/code&gt; and that it is ok for guests to login.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-nohighlight&#34;&gt;[global]
  # ...
  guest account = nobody
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Which defines the account to use when authenticating guests. Don’t forget to create this user using &lt;code&gt;smbpasswd -an nobody&lt;/code&gt;. This will create the user with no password.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-nohighlight&#34;&gt;[global]
  #...
  map to guest = bad user
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This maps any unknown username to the specified guest user, so login always succeeds.&lt;/p&gt;

&lt;h2 id=&#34;useful-commands&#34;&gt;Useful commands&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;sudo service smbd restart&lt;/code&gt; - restarts samba server (reloads config)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;smbpasswd -an nobody&lt;/code&gt; - creates user with no password in smb&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;links&#34;&gt;Links&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.samba.org/samba/docs/using_samba/ch09.html&#34;&gt;Samba&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://micheljansen.org/blog/entry/182&#34;&gt;Configuring anonymous public shares with Samba 3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.computerhope.com/unix/groupadd.htm&#34;&gt;Linux and Unix groupadd command&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.cyberciti.biz/faq/howto-linux-add-user-to-group/&#34;&gt;Howto: Linux Add User To Group&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.cyberciti.biz/faq/how-to-use-chmod-and-chown-command/&#34;&gt;Howto: Use chmod and chown Command&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>nmap</title>
      <link>https://michalkowol.github.io/posts/2016-11-03-nmap/</link>
      <pubDate>Thu, 03 Nov 2016 00:00:00 +0000</pubDate>
      
      <guid>https://michalkowol.github.io/posts/2016-11-03-nmap/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://stackoverflow.com/questions/16981128/nmap-ip-range-specification&#34;&gt;http://stackoverflow.com/questions/16981128/nmap-ip-range-specification&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://hackertarget.com/nmap-cheatsheet-a-quick-reference-guide/&#34;&gt;https://hackertarget.com/nmap-cheatsheet-a-quick-reference-guide/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.garron.me/en/go2linux/nmap-command-graph-front-end-port-scan.html&#34;&gt;https://www.garron.me/en/go2linux/nmap-command-graph-front-end-port-scan.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;namp nmap 192.168.0.0/24&lt;/code&gt; Scan a subnet&lt;/li&gt;
&lt;li&gt;&lt;code&gt;nmap 192.168.0.0/24&lt;/code&gt; Scan a range of IPs&lt;/li&gt;
&lt;li&gt;&lt;code&gt;nmap 192.168.0.1-20&lt;/code&gt; Scan a range of IPs&lt;/li&gt;
&lt;li&gt;&lt;code&gt;nmap 192.168.0.1-20 192.168.0.30-40&lt;/code&gt; Scan a range of IPs&lt;/li&gt;
&lt;li&gt;&lt;code&gt;nmap -sS 192.168.1.1&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;nmap -sS 192.168.0.1-20&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Scan a single Port &lt;code&gt;nmap -p 22 192.168.1.1&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Scan a range of ports &lt;code&gt;nmap -p 1-100 192.168.1.1&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Scan 100 most common ports (Fast) &lt;code&gt;nmap -F 192.168.1.1&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Scan all 65535 ports &lt;code&gt;nmap -p- 192.168.1.1&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Scan using TCP connect &lt;code&gt;nmap -sT 192.168.1.1&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Scan using TCP SYN scan (default) &lt;code&gt;nmap -sS 192.168.1.1&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Scan UDP ports &lt;code&gt;nmap -sU -p 123,161,162 192.168.1.1&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Heartbleed Testing &lt;code&gt;nmap -sV -p 443 --script=ssl-heartbleed 192.168.1.0/24&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>How to: rsync</title>
      <link>https://michalkowol.github.io/posts/2016-10-30-rsync-how-to/</link>
      <pubDate>Sun, 30 Oct 2016 00:00:00 +0000</pubDate>
      
      <guid>https://michalkowol.github.io/posts/2016-10-30-rsync-how-to/</guid>
      <description>

&lt;h3 id=&#34;documentation&#34;&gt;Documentation&lt;/h3&gt;

&lt;p&gt;rsync selected options&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;-a, --archive It is more commonly used than -r (recursive) and is usually what you want to use.
-z, --compress With this option, rsync compresses the file data as it is sent to the destination machine
-v, --verbose This option increases the amount of information the daemon logs during its startup phase.
-x, --one-file-system This tells rsync to avoid crossing a filesystem boundary when recursing.
-A, --acls Preserve ACLs (implies -p).
-H, --hard-links This tells rsync to look for hard-linked files.
-X, --xattrs This option causes rsync to update the remote extended attributes to be the same as the local ones.
-e, --rsh=COMMAND Specify the remote shell to use.
--delete-after Receiver deletes after transfer, not before.
-n, --dry-run This makes rsync perform a trial run that doesn&#39;t make any changes.
--progress This option tells rsync to print information showing the progress of the transfer.
--human-readable Output numbers in a more human-readable format.
--append-verify Append w/old data in file checksum
--protect-args This option sends all filenames and most options to the remote rsync without allowing the remote shell to interpret them. This means that spaces are not split in names, and any non-wildcard special characters are not translated (such as ~, $, ;, &amp;amp;, etc.). Wildcards are expanded on the remote host by rsync (instead of the shell doing it)
--exclude-from Exclude files or directories from given file
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;examples&#34;&gt;Examples&lt;/h3&gt;

&lt;h4 id=&#34;simple-examples&#34;&gt;Simple examples&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# without ssh
rsync -avzx . user@hostname::NetBackup/owncloud
# with ssh
rsync -avzx -e ssh . user@hostname:~/tmp
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;more-advanced-examples&#34;&gt;More advanced examples&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# with dry run (no changes - files are not deleted on server)
rsync -avzx --dry-run --delete-after -e ssh . user@hostname:~/tmp
# with ssh on port 48419
rsync -avzx -e &amp;quot;ssh -p 48419&amp;quot; . user@hostname:~/tmp
# with progress information
rsync -avzx --progress -e ssh . user@hostname:~/tmp
# human readable format - kilk/mega/giga bytes instead of bytes
rsync -avzx --human-readable -e ssh . user@hostname:~/tmp
# delete files *after* sync is complete
rsync -avzx --delete-after -e ssh . user@hostname:~/tmp
# with mac to linux file change encoding
rsync -avzx --iconv=utf-8-mac,utf-8 -e ssh . user@hostname:~/tmp
# with append w/old data in file checksum
rsync -avzx --append-verify -e ssh . user@hostname:~/tmp
# protect spaces
rsync -avzx --protect-args -e ssh . &amp;quot;user@hostname:/homes/michal/tmp with space&amp;quot;
# exclude files from &#39;exclude.txt&#39;
rsync -avzx --exclude-from &#39;exclude.txt&#39; -e ssh . user@hostname:~/tmp
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;sync-direction&#34;&gt;Sync direction&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# from server to laptop
rsync [OPTION...] &amp;lt;server-path&amp;gt; &amp;lt;laptop-path&amp;gt;
# form laptop to server
rsync [OPTION...] &amp;lt;laptop-path&amp;gt; &amp;lt;server-path&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;full-example&#34;&gt;Full example&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;rsync -avzx --iconv=utf-8-mac,utf-8 --append-verify --progress --human-readable -e &amp;quot;ssh -p 48419&amp;quot; . user@hostname:~/tmp
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;On windows (&lt;a href=&#34;https://www.itefix.net/cwrsync&#34;&gt;cwRsync&lt;/a&gt;)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;rsync -avzx --append-verify --progress --human-readable -e &amp;quot;ssh -p 48419 -i c:\ssh\id_rsa&amp;quot; &amp;quot;c/dir/dir/&amp;quot; user@hostname:~/tmp/
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;notes&#34;&gt;Notes&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;trailing &lt;code&gt;/&lt;/code&gt; in directory name is &lt;strong&gt;very&lt;/strong&gt; important - there is a big difference between &lt;code&gt;rsync dir1 dir2&lt;/code&gt; and &lt;code&gt;rsync dir1/ dir2/&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.digitalocean.com/community/tutorials/how-to-use-rsync-to-sync-local-and-remote-directories-on-a-vps&#34;&gt;https://www.digitalocean.com/community/tutorials/how-to-use-rsync-to-sync-local-and-remote-directories-on-a-vps&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;always use &lt;code&gt;--iconv=utf-8-mac,utf-8&lt;/code&gt; when initialising the rsync from the mac&lt;/li&gt;
&lt;li&gt;always use &lt;code&gt;--iconv=utf-8,utf-8-mac&lt;/code&gt; when initialising the rsync from the linux&lt;/li&gt;
&lt;li&gt;the &lt;code&gt;--iconv&lt;/code&gt; argument cam with &lt;code&gt;rsync&lt;/code&gt; version 3.0.0 (release notes) OSX provides only version 2.6.9&lt;/li&gt;
&lt;li&gt;upgrade rsync on mac &lt;code&gt;brew update &amp;amp;&amp;amp; brew tap homebrew/dupes &amp;amp;&amp;amp; brew install rsync&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--append-verify&lt;/code&gt; isn&amp;rsquo;t dangerous: It will always read and compare the data on both ends and not just assume they&amp;rsquo;re equal. It does this using checksums, so it&amp;rsquo;s easy on the network, but it does require reading the shared amount of data on both ends of the wire before it can actually resume the transfer by appending to the target.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Thus you need to get a newer version latest is 3.1.1 (2.6.9 was released in 2006)&lt;/p&gt;

&lt;p&gt;I would also get a newer version rsync as xattr copying was also introduced after 2.6.9&lt;/p&gt;

&lt;h3 id=&#34;references&#34;&gt;References&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://linux.die.net/man/1/rsync&#34;&gt;rsync man&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.itefix.net/cwrsync&#34;&gt;cwRsync&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Synology ssh with public key</title>
      <link>https://michalkowol.github.io/posts/2016-10-29-synology/</link>
      <pubDate>Sat, 29 Oct 2016 00:00:00 +0000</pubDate>
      
      <guid>https://michalkowol.github.io/posts/2016-10-29-synology/</guid>
      <description>

&lt;p&gt;First of all generate ssh private and public key on your local machine.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;local&amp;gt; ssh-keygen -t rsa -b 4096 -C &amp;quot;yourmail@example.com&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It is good idea to create dedicated user for &lt;code&gt;rsync&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;synology&amp;gt; adduser rsync
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;By default Synology sets home directory rights to &lt;code&gt;777&lt;/code&gt;. &lt;code&gt;sshd&lt;/code&gt; is very picky and its needs different home directory rights.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;synology&amp;gt; chmod 755 /var/services/homes/rsync
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, you need to modify &lt;code&gt;/etc/ssh/sshd_config&lt;/code&gt; on Synlogy. Make sure it has the following line uncommented.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# ...
PubkeyAuthentication yes
# ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then you need to create the &lt;code&gt;authorized_keys&lt;/code&gt; file on Synlogy. To this file remote users add their public keys. File permissions are crucial here and if they are wrong ssh will refuse you.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;synology&amp;gt; su -s rsync
synology&amp;gt; cd
synology&amp;gt; pwd # make sure you are in /var/services/homes/rsync
synology&amp;gt; mkdir .ssh
synology&amp;gt; chmod 700 .ssh
synology&amp;gt; touch .ssh/authorized_keys
synology&amp;gt; chmod 600 .ssh/authorized_keys
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Typically you want the &lt;code&gt;.ssh&lt;/code&gt; directory permissions to be &lt;code&gt;700 (drwx------)&lt;/code&gt;, home directory to be &lt;code&gt;755 (drwxr-xr-x)&lt;/code&gt; and the public key (&lt;code&gt;.pub file&lt;/code&gt;) to be &lt;code&gt;644 (-rw-r--r--)&lt;/code&gt;. Your private key (&lt;code&gt;id_rsa&lt;/code&gt;) should be &lt;code&gt;600 (-rw-------)&lt;/code&gt;. &lt;code&gt;authorized_keys&lt;/code&gt; should be &lt;code&gt;600 (-rw-------)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Then add public key corresponding to a private key in one line in &lt;code&gt;authorized_keys&lt;/code&gt;. You can use this command.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;local&amp;gt; cat ~/.ssh/id_rsa.pub | ssh user@hostname &#39;cat &amp;gt;&amp;gt; .ssh/authorized_keys&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now restart Synology or quicker just force the ssh deamon to reload its config&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;synology&amp;gt; ps | grep sshd
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;synology&amp;gt; kill -HUP $PID
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You should now be able ssh to Synology as rsync with no password.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;local&amp;gt; ssh rsync@synology
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note: How to change shell for user?&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;chsh -s /usr/local/bin/bash username
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;/sbin/nologin&lt;/code&gt; disables login.&lt;/p&gt;

&lt;h3 id=&#34;references&#34;&gt;References&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://karlcode.owtelse.com/blog/2015/06/27/passwordless-ssh-on-synology/&#34;&gt;Passwordless Ssh on Synology&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Akka (notes, part 1)</title>
      <link>https://michalkowol.github.io/posts/2014-12-01-akka-notes-part-1/</link>
      <pubDate>Mon, 01 Dec 2014 00:00:00 +0000</pubDate>
      
      <guid>https://michalkowol.github.io/posts/2014-12-01-akka-notes-part-1/</guid>
      <description>

&lt;h3 id=&#34;akka-traits&#34;&gt;Akka traits&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://michalkowol.github.io/img/akka-notes/reactive-traits.svg&#34; alt=&#34;akka traits&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Akka has 4 main traits. Those are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Responsive - the system responds very fast.&lt;/li&gt;
&lt;li&gt;Resilient - the system stays responsive in the face of failure.&lt;/li&gt;
&lt;li&gt;Elastic - the system stays responsive under varying workload. You can easily add/remove nodes (machines) to/from system.&lt;/li&gt;
&lt;li&gt;Message Driven - object talks through messages. Objects are loosely coupled. There is a big diffrence between event and message - every message has recipient address, but events don&amp;rsquo;t have to have it.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Please see &lt;a href=&#34;http://www.reactivemanifesto.org/&#34;&gt;Reactive Manifesto&lt;/a&gt; for more information.&lt;/p&gt;

&lt;h3 id=&#34;concurrency-vs-parallelism&#34;&gt;Concurrency vs parallelism&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Definition 1

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Concurrency&lt;/strong&gt; is when two tasks can start, run, and complete in overlapping time periods. It doesn&amp;rsquo;t necessarily mean they&amp;rsquo;ll ever both be running at the same instant. Eg. multitasking on a single-core machine.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Parallelism&lt;/strong&gt; is when tasks literally run at the same time, eg. on a multicore processor.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Definition 2

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Concurrency&lt;/strong&gt; A condition that exists when at least two threads are making progress. A more generalized form of parallelism that can include time-slicing as a form of virtual parallelism.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Parallelism&lt;/strong&gt; A condition that arises when at least two threads are executing simultaneously.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Ref: &lt;a href=&#34;http://stackoverflow.com/questions/1050222/concurrency-vs-parallelism-what-is-the-difference&#34;&gt;stackoverflow.com&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Example&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Concurrency - two queues, one coffee machine&lt;/li&gt;
&lt;li&gt;Parallelism - two queues, two coffee machines&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;https://michalkowol.github.io/img/akka-notes/con_and_par.jpg&#34; alt=&#34;Concurrency vs Parallelism&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Source: &lt;a href=&#34;http://joearms.github.io/2013/04/05/concurrent-and-parallel-programming.html&#34;&gt;joearms.github.io&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;actor-actorref&#34;&gt;Actor, ActorRef&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://michalkowol.github.io/img/akka-notes/actor-ref.png&#34; alt=&#34;Actor with Mailbox&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Each actor has dispatcher and mailbox.&lt;/li&gt;
&lt;li&gt;If we send message to actor, it will add message to its mailbox and it will return &lt;strong&gt;immediately&lt;/strong&gt; - this is not blocking operation.&lt;/li&gt;
&lt;li&gt;If we create actor, &lt;code&gt;actorOf&lt;/code&gt; will return &lt;strong&gt;immediately&lt;/strong&gt; &lt;code&gt;ActorRef&lt;/code&gt;. It does not wait to create an instance. If we send messages to actor that is &amp;ldquo;not started&amp;rdquo;, messages will be added to mailbox and will be processed when actor is inicialized - we will not lose any message.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Dispatcher&lt;/code&gt; assigns (schedules) thread to process the message.&lt;/li&gt;
&lt;li&gt;Many actors have the same dispatcher - it is some kind of thread pool.&lt;/li&gt;
&lt;li&gt;One message is passed to the actor&lt;/li&gt;
&lt;li&gt;Only &lt;strong&gt;one&lt;/strong&gt; thread can be in &lt;strong&gt;receive&lt;/strong&gt; block (&amp;ldquo;single-threaded illusion&amp;rdquo;).&lt;/li&gt;
&lt;li&gt;Actors could have mutable state (but rember not to share mutable state!).&lt;/li&gt;
&lt;li&gt;Messages must be immutable.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;how-to-handle-unhandled-messages&#34;&gt;How to handle &amp;ldquo;unhandled&amp;rdquo; messages&lt;/h3&gt;

&lt;p&gt;If in receive block we do not handle some message, this message will be dropped (and maybe logged). We can use &lt;code&gt;unhandled&lt;/code&gt; method to do something with messages not handled in receive block.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;override def unhandled(message: Any): Unit = ???
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;top-level-actor&#34;&gt;Top-Level Actor&lt;/h3&gt;

&lt;p&gt;If you create top-level actors, use factory methods - it will simplify testing. Always give name to your top-level actors.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;val topLevelActor = createTopLevelActor()
def createTopLevelActor(): ActorRef = system.actorOf(TopLevel.props, &amp;quot;top-level&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;message-protocol&#34;&gt;Message protocol&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Defince your message protocol in the companion object of the actor.&lt;/li&gt;
&lt;li&gt;If you use message protocol from other actor, use actor name as prefix to this message - this will make code more readable.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;object FooActor {
  case object FooMessage
}
class FooActor extends Actor {
  import FooActor._
  override def receive: Receive = {
    case FooMessage =&amp;gt; ???
    case BarActor.BarMessage =&amp;gt; ???
  }
}

object BarActor {
  case object BarMessage
}
class BarActor extends Actor {
  import BarActor._
  override def receive: Receive = {
    case FooActor.FooMessage =&amp;gt; ???
    case BarMessage =&amp;gt; ???
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;actor-dsl&#34;&gt;Actor DSL&lt;/h3&gt;

&lt;p&gt;To create anonymous actoes we can use &lt;a href=&#34;http://doc.akka.io/docs/akka/2.3.0-RC1/scala/actordsl.html&#34;&gt;Actor DSL&lt;/a&gt;. Here, &lt;code&gt;actor&lt;/code&gt; takes the role of either &lt;code&gt;system.actorOf&lt;/code&gt; or &lt;code&gt;context.actorOf&lt;/code&gt;. It takes an implicit &lt;code&gt;ActorRefFactory&lt;/code&gt; and creates the new &lt;code&gt;Actor&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;import akka.actor.ActorDSL._
 
val a = actor(new Act {
  become {
    case &amp;quot;hello&amp;quot; =&amp;gt; sender() ! &amp;quot;hi&amp;quot;
  }
})
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;best-practices&#34;&gt;Best practices&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Always create &lt;code&gt;Props&lt;/code&gt; factory - the best place for that is in companion object (see: &lt;a href=&#34;http://doc.akka.io/docs/akka/snapshot/scala/actors.html&#34;&gt;Actors — Akka Documentation&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;Put Companion Object before you class.&lt;/li&gt;
&lt;li&gt;Use &lt;code&gt;sender()&lt;/code&gt; &lt;strong&gt;with&lt;/strong&gt; parentheses. It is function, not val and you have to rember about it. It can be very tricky when &lt;code&gt;sender()&lt;/code&gt; will be execute in other thread - in example in &lt;code&gt;Future&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;class WrongWayActor extends Actor {
  override def receive: Receive = {
    case _ =&amp;gt; Future {
      val result = doSomeHeavyComputation
      sender() ! result // if you reacive other message in meantime, it will send the response to WRONG actor
    }
  }
}
 
class GoodWayActor extends Actor {
  override def receive: Receive = {
    case _ =&amp;gt;
      val originalSender = sender()
      Future {
        val result = doSomeHeavyComputation
        originalSender ! result  // it closes clouser over - it will send response to right actor
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Scala (notes)</title>
      <link>https://michalkowol.github.io/posts/2014-11-28-scala-notes/</link>
      <pubDate>Fri, 28 Nov 2014 00:00:00 +0000</pubDate>
      
      <guid>https://michalkowol.github.io/posts/2014-11-28-scala-notes/</guid>
      <description>

&lt;h3 id=&#34;functions-without-parameters&#34;&gt;Functions without parameters&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;def foo: String = ???
def bar(): String = ???
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The first one is better, bacause you can easly replace it with &lt;code&gt;val&lt;/code&gt;. In fact, otheres developers shouldn&amp;rsquo;t know if you use &lt;code&gt;val&lt;/code&gt; or &lt;code&gt;def&lt;/code&gt;. It should be transparent (you shouldn&amp;rsquo;t use parentheses).&lt;/p&gt;

&lt;h3 id=&#34;default-parameters&#34;&gt;Default parameters&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;class Welcome(message: String = &amp;quot;default&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;public-api&#34;&gt;Public API&lt;/h3&gt;

&lt;p&gt;If we define public API, all methods and parameters should have explicite type.&lt;/p&gt;

&lt;h3 id=&#34;operators&#34;&gt;Operators&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;1 + 3 == (1).+(3)
!true == true.unary_!
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To be consisten:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;all operators like &lt;code&gt;+&lt;/code&gt;, &lt;code&gt;!&lt;/code&gt;, &lt;code&gt;-&lt;/code&gt;, etc. should be used with infix notation,&lt;/li&gt;
&lt;li&gt;in other cases we &lt;strong&gt;should&lt;/strong&gt; use dot notation.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;named-parameters&#34;&gt;Named parameters&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;case class User(name: String, lastname: String)
User(name = &amp;quot;Michal&amp;quot;, lastname = &amp;quot;Kowol&amp;quot;) == User(lastname = &amp;quot;Kowol&amp;quot;, name = &amp;quot;Michal&amp;quot;) // true
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When we have a lot of parameters (especially with the same type - integers and strings), we should used named parameters. It makes code more readable and more expressible.&lt;/p&gt;

&lt;h3 id=&#34;imports-in-code-s-block-are-ok&#34;&gt;Imports in code&amp;rsquo;s block are ok&lt;/h3&gt;

&lt;p&gt;If you need specific import only in one function, import it in function body.&lt;/p&gt;

&lt;h3 id=&#34;private-access-modifiers-in-scala&#34;&gt;Private access modifiers in Scala&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;package com.michal

class A {
  private def defaultPrivate = ???
  private [this] def superPrivate(other: A) {
    //other.superPrivate(this) // error
    other.defaultPrivate
    superPrivate(other)
  }
  private [michal] def publicInPackage = ???
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;package com.michal

class B {
  def test(a: A) = {
    a.publicInPackage
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;package com

import com.michal.A

class C {
  def test(a: A) {
    // a.publicInPackage
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;private [this]&lt;/code&gt; is very restrict. It can be be called only in &amp;ldquo;this&amp;rdquo;. You can use package access modifier (it could be good for tests).&lt;/p&gt;

&lt;h3 id=&#34;should-i-extend-app-or-should-i-use-main-args-array-string&#34;&gt;Should I extend &lt;code&gt;App&lt;/code&gt; or should I use &lt;code&gt;main(args: Array[String])&lt;/code&gt;?&lt;/h3&gt;

&lt;p&gt;Extending &lt;code&gt;App&lt;/code&gt; is code for prototyping. In production you should use &lt;code&gt;main&lt;/code&gt;. Why?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Whole object body is treatead as main,&lt;/li&gt;
&lt;li&gt;you don&amp;rsquo;t hava access to args,&lt;/li&gt;
&lt;li&gt;&lt;blockquote&gt;It should be noted that this trait is implemented using the DelayedInit functionality, which means that fields of the object will not have been initialized before the main method has been executed.&lt;/blockquote&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;copy-method-in-case-classes&#34;&gt;&lt;code&gt;copy&lt;/code&gt; method in case classes&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;case class User(name: String, age: Int)
User(name = &amp;quot;Bob&amp;quot;, age = 10).copy(age = 40) // User(Bob, 40)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;list-vs-vector&#34;&gt;List vs Vector&lt;/h3&gt;

&lt;h4 id=&#34;list&#34;&gt;List&lt;/h4&gt;

&lt;p&gt;List has only pointer to first element - it adds very fast to head of list. To add element to end of list it has to iterate throught all elements (&lt;code&gt;O(n)&lt;/code&gt;).&lt;/p&gt;

&lt;h4 id=&#34;vector&#34;&gt;Vector&lt;/h4&gt;

&lt;p&gt;All operations are constant in time (even putting element in the middile of collection).&lt;/p&gt;

&lt;h5 id=&#34;performance-characteristics&#34;&gt;Performance characteristics&lt;/h5&gt;

&lt;p&gt;&lt;img src=&#34;https://michalkowol.github.io/img/scala-notes/performance.png&#34; alt=&#34;performance characteristics&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;Performance characteristics&#34;&gt;Performance characteristics&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;seq-is-mutable&#34;&gt;&lt;code&gt;Seq&lt;/code&gt; is mutable!&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;val s = Array(1 ,2, 3) // s: Array[Int] = Array(1, 2, 3)
def testCase(s: Seq[Int]) = s // testCase: TestCase[](val s: Seq[Int]) =&amp;gt; Seq[Int]
testCase(s) // res0: Seq[Int] = WrappedArray(1, 2, 3)
s(0) = 7 // res1: Unit = ()
testCase(s) // res2: Seq[Int] = WrappedArray(7, 2, 3)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There is at least one mutable subtype of &lt;code&gt;Seq&lt;/code&gt;: &lt;code&gt;WrappedArray&lt;/code&gt;. To be sure sequence is immutable use &lt;code&gt;scala.collection.immutable.Seq&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#34;future&#34;&gt;Future&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;import scala.concurrent.{Await, Future}
import scala.concurrent.duration._
import scala.concurrent.ExecutionContext.Implicits.global

def ageNextYear(currentAge: Int): Future[Int] = {
  Future { currentAge + 1 }
}

def welcome(name: String, age: Int): Future[String] = {
  Future { s&amp;quot;$name $age&amp;quot; }
}

val f = for {
  age &amp;lt;- ageNextYear(25)
  message &amp;lt;- welcome(&amp;quot;Michal&amp;quot;, age)
} yield s&amp;quot;$message nextYear: $age&amp;quot;

Await.result(f, 1.second) // Michal 26 nextYear: 26
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;Await.result&lt;/code&gt; is blocking operation.&lt;/p&gt;

&lt;h3 id=&#34;diffrence-between-and-in-for-comprehension&#34;&gt;Diffrence between &lt;code&gt;=&lt;/code&gt; and &lt;code&gt;&amp;lt;-&lt;/code&gt; in for comprehension&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;val a = Some(2)
val b = Some(3)

for {
  v1 &amp;lt;- a
  v2 &amp;lt;- b //v2 is Int
} yield v1 + v2

for {
  v1 &amp;lt;- a
  v2 = b // v2 is Option[Int]
} yield v1 // + v2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;-&lt;/code&gt; will &amp;ldquo;unpack&amp;rdquo;, &lt;code&gt;=&lt;/code&gt; is simple assigment.&lt;/p&gt;

&lt;h3 id=&#34;try-object-trait&#34;&gt;&lt;code&gt;Try&lt;/code&gt; object/trait&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;import scala.util.Try

val s = Try(&amp;quot;100&amp;quot;.toInt) // Success(100)
val f = Try(&amp;quot;michal&amp;quot;.toInt) // Failure(java.lang.NumberFormatException ...)

s.map(_ + 200) // Success(300)
f.map(_ + 200) // Failure(java.lang.NumberFormatException ...)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In &lt;a href=&#34;http://www.scalactic.org/&#34;&gt;scalactic&lt;/a&gt; you can use &lt;code&gt;String Or ErrorMessage&lt;/code&gt; (&lt;code&gt;Good(...)&lt;/code&gt;, &lt;code&gt;Bad(...)&lt;/code&gt; subclasses).&lt;/p&gt;

&lt;h3 id=&#34;if-in-for-comprehension&#34;&gt;&lt;code&gt;if&lt;/code&gt; in for-comprehension&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;var ll = List(List(1, 2, 3), List(2, 3), List(1), List(9), List(11, 1))

for {
  l &amp;lt;- ll
  e &amp;lt;- l if l.contains(1)
} yield e // List(1, 2, 3, 1, 11, 1)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can use &lt;code&gt;if&lt;/code&gt; in for-comprehension.
Every for-comprehension can be replaced with &lt;code&gt;flatMap&lt;/code&gt; and &lt;code&gt;map&lt;/code&gt; (outer iteration is &lt;code&gt;flatMap&lt;/code&gt;).&lt;/p&gt;

&lt;h3 id=&#34;filter-vs-withfilter&#34;&gt;&lt;code&gt;filter&lt;/code&gt; vs &lt;code&gt;withFilter&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;filter&lt;/code&gt; always returns collections. &lt;code&gt;withFilter&lt;/code&gt; returns generator. You can &amp;ldquo;join&amp;rdquo; join many generators.&lt;/p&gt;

&lt;p&gt;You should &lt;code&gt;withFilter&lt;/code&gt; when you have many filters.&lt;/p&gt;

&lt;h3 id=&#34;class-modifiers&#34;&gt;Class modifiers&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;final class Animal&lt;/code&gt; you cannnot extend Animal&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sealed&lt;/code&gt; all subtypes must be defined in this file. &lt;code&gt;sealed&lt;/code&gt; should be define when you use &lt;a href=&#34;http://en.wikipedia.org/wiki/Algebraic_data_type&#34;&gt;ADT (algebraic data types)&lt;/a&gt;. &lt;code&gt;sealed&lt;/code&gt; is very helpfull in pattern matching.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;traits-linearization&#34;&gt;Traits linearization&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;trait A {
  def m: String
}
trait B extends A {
  override def m: String = &amp;quot;b&amp;quot;
  def b = &amp;quot;b&amp;quot;
}
trait C extends A {
  override def m: String = &amp;quot;c&amp;quot;
  def c = &amp;quot;c&amp;quot;
}

class BC extends B with C
class CB extends C with B

new BC().m // c
new CB().m // b
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;const-pattern-mattching&#34;&gt;Const Pattern Mattching&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;def pattern(value: String, consToMatch: String): String = {
  val a = &amp;quot;1&amp;quot;
  val b = &amp;quot;2&amp;quot;
  value match {
    case `a` =&amp;gt; &amp;quot;one&amp;quot;
    case `b` =&amp;gt; &amp;quot;two&amp;quot;
    case `consToMatch` =&amp;gt; &amp;quot;!!!&amp;quot;
    case _ =&amp;gt; &amp;quot;???&amp;quot;
  }
}

pattern(&amp;quot;1&amp;quot;, &amp;quot;3&amp;quot;) // one
pattern(&amp;quot;3&amp;quot;, &amp;quot;3&amp;quot;) // !!!
pattern(&amp;quot;3&amp;quot;, &amp;quot;xxx&amp;quot;) // ???
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;others&#34;&gt;Others&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;In subclass you can replace &lt;code&gt;def&lt;/code&gt; with &lt;code&gt;val&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;There is type &lt;code&gt;Either&lt;/code&gt; and &lt;code&gt;Options&lt;/code&gt; - very usefull to handle errors or null pointers.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;lazy val&lt;/code&gt; can caused some problems. Instead of &lt;code&gt;lazy val&lt;/code&gt; maybe yhou should use &lt;code&gt;def&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;s&amp;quot;...&amp;quot;&lt;/code&gt; - string interpolation, &lt;code&gt;f&amp;quot;...&amp;quot;&lt;/code&gt; - formating (&lt;code&gt;f&amp;quot;$value%02x&amp;quot;&lt;/code&gt; (300 -&amp;gt; 12c)).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;trait&lt;/code&gt; or &lt;code&gt;abstract class&lt;/code&gt;? In most cases &lt;code&gt;trait&lt;/code&gt; is better. The only reason to use &lt;code&gt;abstract class&lt;/code&gt; is when we have to use constructor params.&lt;/li&gt;
&lt;li&gt;If we ovverride method, it should call &lt;code&gt;super&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;It is better to use simple &lt;code&gt;case classes&lt;/code&gt; than &lt;code&gt;Tuple&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Scala Traits in JavaScript</title>
      <link>https://michalkowol.github.io/posts/2014-10-23-traits-in-javascript/</link>
      <pubDate>Thu, 23 Oct 2014 00:00:00 +0000</pubDate>
      
      <guid>https://michalkowol.github.io/posts/2014-10-23-traits-in-javascript/</guid>
      <description>&lt;p&gt;Traits:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function _extend(object, source) {
    for (var key in source) {
        if (source.hasOwnProperty(key)) {
            object[key] = source[key];
        }
    }
    return object;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function _with() {
    var self = {};
    var args = Array.prototype.slice.call(arguments);
    for (var i = 0; i &amp;lt; args.length; i++) {
        args[i](self);
    }
    self.super = _extend({}, self);
    return self;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Traits example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var mtv = (function (mtv) {
    &#39;use strict&#39;;
 
    mtv.TraitA = function (self) {
        self.functionA = function () {
            console.log(&#39;[start]: TraitA.functionA&#39;);
            console.log(self.getModel());
            console.log(&#39;[end]: TraitA.functionA&#39;);
        };
 
        self.dummyModel = function () {
            console.log(&#39;[start]: TraitA.dummyModel&#39;);
            console.log(&#39;[end]: TraitA.dummyModel&#39;);
        };
    };
 
    mtv.TraitB = function (self) {
        self.functionB = function () {
            console.log(&#39;[start]: TraitB.functionB&#39;);
            console.log(self.getModel());
            console.log(&#39;[end]: TraitB.functionB&#39;);
        };
 
        self.dummyModel = function () {
            console.log(&#39;[start]: TraitB.dummyModel&#39;);
            console.log(&#39;[end]: TraitB.dummyModel&#39;);
        };
 
        self.onlyB = function () {
            console.log(&#39;[start]: TraitB.onlyB&#39;);
            console.log(&#39;[end]: TraitB.onlyB&#39;);
        };
    };
 
    mtv.classWithTraitATraitB = function (model) {
        var self = _with(mtv.TraitA, mtv.TraitB);
 
        self.getModel = function () {
            console.log(&#39;[start]: classWithTraitATraitB.getModel&#39;);
            console.log(&#39;[end]: classWithTraitATraitB.getModel&#39;);
            return model;
        };
 
        self.functionB = function () {
            console.log(&#39;[start]: classWithTraitATraitB.functionB&#39;);
            self.super.functionB();
            self.functionA();
            console.log(&#39;[end]: classWithTraitATraitB.functionB&#39;);
        };
 
        return self;
    };
 
    var classA = mtv.classWithTraitATraitB(&#39;model&#39;);
    classA.functionA();
    classA.functionB();
    classA.dummyModel();
    return mtv;
})(mtv || {});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Result:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[start]: TraitA.functionA
[start]: classWithTraitATraitB.getModel
[end]: classWithTraitATraitB.getModel
model
[end]: TraitA.functionA
[start]: classWithTraitATraitB.functionB
[start]: TraitB.functionB
[start]: classWithTraitATraitB.getModel
[end]: classWithTraitATraitB.getModel
model
[end]: TraitB.functionB
[start]: TraitA.functionA
[start]: classWithTraitATraitB.getModel
[end]: classWithTraitATraitB.getModel
model
[end]: TraitA.functionA
[end]: classWithTraitATraitB.functionB
[start]: TraitB.dummyModel
[end]: TraitB.dummyModel
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>&#34;Closures&#34; in JavaScript</title>
      <link>https://michalkowol.github.io/posts/2014-07-22-closures-in-javascript/</link>
      <pubDate>Tue, 22 Jul 2014 00:00:00 +0000</pubDate>
      
      <guid>https://michalkowol.github.io/posts/2014-07-22-closures-in-javascript/</guid>
      <description>&lt;p&gt;Closures in JS can simulate classes. Polymorphism, encapsulation and inheritance are avilable in this aproach.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function _extend(object, source) {
    for (var key in source) {
        if (source.hasOwnProperty(key)) {
            object[key] = source[key];
        }
    }
    return object;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var mtv = (function (mtv) {
    &#39;use strict&#39;;
 
    mtv.ClassA = function (a) {
        var self = {};
        self.a = a;
 
        function privateInA () {
            console.log(&#39;ClassA.privateInA.start&#39;);
            console.log(self.a);
            console.log(&#39;ClassA.privateInA.end&#39;);
        }
 
        self.bar = function () {
            console.log(&#39;ClassA.bar.start&#39;);
            self.foo();
            privateInA();
            console.log(&#39;ClassA.bar.end&#39;);
        };
 
        self.foo = function () {
            console.log(&#39;ClassA.foo.start&#39;);
            console.log(self.a);
            console.log(&#39;ClassA.foo.end&#39;);
        };
 
        self.changeA = function () {
            console.log(&#39;ClassA.changeA.start&#39;);
            self.a = self.a + &#39; Kowol&#39;;
            console.log(&#39;ClassA.changeA.end&#39;);
        };
 
        return self;
    };
 
    mtv.ClassB = function (b) {
        var self = mtv.ClassA(b);
        var _super = _extend({}, self);
        self.b = b;
 
        self.foo = function () {
            console.log(&#39;ClassB.foo.start&#39;);
            console.log(self.b + &#39; &#39; + self.a);
            _super.foo();
            console.log(&#39;ClassB.foo.end&#39;);
        };
 
        return self;
    };
 
    return mtv;
})(mtv || {});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var classB = mtv.ClassB(&#39;Michal&#39;);
classB.foo();       // ClassB.foo.start
                    // Michal Michal
                    // ClassA.foo.start
                    // Michal
                    // ClassA.foo.end
                    // ClassB.foo.end
 
classB.bar();       // ClassA.bar.start
                    // ClassB.foo.start
                    // Michal Michal
                    // ClassA.foo.start
                    // Michal
                    // ClassA.foo.end
                    // ClassB.foo.end
                    // ClassA.privateInA.start
                    // Michal
                    // ClassA.privateInA.end
                    // ClassA.bar.end
 
classB.changeA();   // ClassA.changeA.start
                    // ClassA.changeA.end
 
classB.bar();       // ClassA.bar.start
                    // ClassB.foo.start
                    // Michal Michal Kowol
                    // ClassA.foo.start
                    // Michal Kowol
                    // ClassA.foo.end
                    // ClassB.foo.end
                    // ClassA.privateInA.start
                    // Michal Kowol
                    // ClassA.privateInA.end
                    // ClassA.bar.end
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>&#34;Classes&#34; and Singletions in JavaScript</title>
      <link>https://michalkowol.github.io/posts/2014-04-24-classes-and-singletions-in-javascript/</link>
      <pubDate>Thu, 24 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>https://michalkowol.github.io/posts/2014-04-24-classes-and-singletions-in-javascript/</guid>
      <description>&lt;p&gt;In JS there are a lot of way to simulate classes. Here are examples:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var com = com || {};

com.MTVClass1 = function (videoID) {
    &amp;quot;use strict&amp;quot;;
    var self = {};
 
    function bar() {
        return &amp;quot;bar&amp;quot; + videoID;
    }
 
    self.foo = function () {
        return &amp;quot;foo&amp;quot; + bar() + videoID;
    };
 
    return self;
};

com.MTVClass1(&amp;quot;123&amp;quot;).foo();
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var com = com || {};
 
(function () {
    &#39;use strict&#39;;
 
    com.MTVClass2 = function (videoID) {
        this.videoID = videoID;
    };
 
    function bar() {
        return &amp;quot;bar&amp;quot;; // does not have access to videoID
    }
 
    com.MTVClass2.prototype.foo = function () {
        return &amp;quot;foo&amp;quot; + bar() + this.videoID;
    };
}());

new com.MTVClass2(&amp;quot;1234&amp;quot;).foo();
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var com = com || {};
 
com.MTVClass3 = (function () {
    &#39;use strict&#39;;
 
    function MTVClass3(videoID) {
        this.videoID = videoID;
    }
 
    function bar() {
        return &amp;quot;bar&amp;quot;;  // does not have access to videoID
    }
 
    MTVClass3.prototype.foo = function () {
        return &amp;quot;foo&amp;quot; + bar() + this.videoID;
    };
 
    return MTVClass3;
}());

new com.MTVClass3(&amp;quot;123&amp;quot;).foo();
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var com = com || {};
 
com.MTVClass4 = (function () {
    &#39;use strict&#39;;
 
    function MTVClass4(videoID) {
        this.videoID = videoID;
    }
 
    function bar(self) {
        return &amp;quot;bar&amp;quot; + self.videoID;
    }
 
    MTVClass4.prototype.foo = function () {
        return &amp;quot;foo&amp;quot; + bar(this) + this.videoID;
    };
 
    return MTVClass4;
}());

new com.MTVClass4(&amp;quot;123&amp;quot;).foo();
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var com = com || {};
 
com.MTVObject = (function () {
    &amp;quot;use strict&amp;quot;;
    var self = {};
 
    function bar() {
        return &amp;quot;bar&amp;quot;;
    }
 
    self.foo = function () {
        return &amp;quot;foo&amp;quot; + bar();
    };
 
    return self;
}());

com.MTVObject.foo();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In my option &lt;code&gt;MTVClass1.js&lt;/code&gt; approach is the best one. &lt;code&gt;MTVClass1.js&lt;/code&gt; has similar concept like &lt;code&gt;MTVObject.js&lt;/code&gt;. In &lt;code&gt;MTVClass2.js&lt;/code&gt; and &lt;code&gt;MTVClass3.js&lt;/code&gt; you do not have access to class fields. &lt;code&gt;MTVClass1.js&lt;/code&gt; has some small performance issue, but remeber:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Premature optimization is the root of all evil.&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
  </channel>
</rss>