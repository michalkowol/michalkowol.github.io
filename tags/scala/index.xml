<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Scala on Michał Kowol</title>
    <link>https://michalkowol.github.io/tags/scala/</link>
    <description>Recent content in Scala on Michał Kowol</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 01 Dec 2014 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://michalkowol.github.io/tags/scala/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Akka (notes, part 1)</title>
      <link>https://michalkowol.github.io/posts/2014-12-01-akka-notes-part-1/</link>
      <pubDate>Mon, 01 Dec 2014 00:00:00 +0000</pubDate>
      
      <guid>https://michalkowol.github.io/posts/2014-12-01-akka-notes-part-1/</guid>
      <description>Akka traits Akka has 4 main traits. Those are:
 Responsive - the system responds very fast. Resilient - the system stays responsive in the face of failure. Elastic - the system stays responsive under varying workload. You can easily add/remove nodes (machines) to/from system. Message Driven - object talks through messages. Objects are loosely coupled. There is a big diffrence between event and message - every message has recipient address, but events don&amp;rsquo;t have to have it.</description>
    </item>
    
    <item>
      <title>Scala (notes)</title>
      <link>https://michalkowol.github.io/posts/2014-11-28-scala-notes/</link>
      <pubDate>Fri, 28 Nov 2014 00:00:00 +0000</pubDate>
      
      <guid>https://michalkowol.github.io/posts/2014-11-28-scala-notes/</guid>
      <description>Functions without parameters def foo: String = ??? def bar(): String = ???  The first one is better, bacause you can easly replace it with val. In fact, otheres developers shouldn&amp;rsquo;t know if you use val or def. It should be transparent (you shouldn&amp;rsquo;t use parentheses).
Default parameters class Welcome(message: String = &amp;quot;default&amp;quot;)  Public API If we define public API, all methods and parameters should have explicite type.</description>
    </item>
    
    <item>
      <title>&#34;Closures&#34; in JavaScript</title>
      <link>https://michalkowol.github.io/posts/2014-07-22-closures-in-javascript/</link>
      <pubDate>Tue, 22 Jul 2014 00:00:00 +0000</pubDate>
      
      <guid>https://michalkowol.github.io/posts/2014-07-22-closures-in-javascript/</guid>
      <description>Closures Closures in JS can simulate classes. Polymorphism, encapsulation and inheritance are avilable in this aproach.
function _extend(object, source) { for (var key in source) { if (source.hasOwnProperty(key)) { object[key] = source[key]; } } return object; }  var mtv = (function (mtv) { &#39;use strict&#39;; mtv.ClassA = function (a) { var self = {}; self.a = a; function privateInA () { console.log(&#39;ClassA.privateInA.start&#39;); console.log(self.a); console.log(&#39;ClassA.privateInA.end&#39;); } self.bar = function () { console.</description>
    </item>
    
  </channel>
</rss>