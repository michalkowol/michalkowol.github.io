<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Jvm on Michał Kowol</title>
    <link>https://michalkowol.github.io/tags/jvm/</link>
    <description>Recent content in Jvm on Michał Kowol</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 01 Dec 2014 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://michalkowol.github.io/tags/jvm/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Akka (notes, part 1)</title>
      <link>https://michalkowol.github.io/posts/2014-12-01-akka-notes-part-1/</link>
      <pubDate>Mon, 01 Dec 2014 00:00:00 +0000</pubDate>
      
      <guid>https://michalkowol.github.io/posts/2014-12-01-akka-notes-part-1/</guid>
      <description>Akka traits Akka has 4 main traits. Those are:
 Responsive - the system responds very fast. Resilient - the system stays responsive in the face of failure. Elastic - the system stays responsive under varying workload. You can easily add/remove nodes (machines) to/from system. Message Driven - object talks through messages. Objects are loosely coupled. There is a big diffrence between event and message - every message has recipient address, but events don&amp;rsquo;t have to have it.</description>
    </item>
    
    <item>
      <title>Scala (notes)</title>
      <link>https://michalkowol.github.io/posts/2014-11-28-scala-notes/</link>
      <pubDate>Fri, 28 Nov 2014 00:00:00 +0000</pubDate>
      
      <guid>https://michalkowol.github.io/posts/2014-11-28-scala-notes/</guid>
      <description>Functions without parameters def foo: String = ??? def bar(): String = ???  The first one is better, bacause you can easly replace it with val. In fact, otheres developers shouldn&amp;rsquo;t know if you use val or def. It should be transparent (you shouldn&amp;rsquo;t use parentheses).
Default parameters class Welcome(message: String = &amp;quot;default&amp;quot;)  Public API If we define public API, all methods and parameters should have explicite type.</description>
    </item>
    
    <item>
      <title>Java with Spring</title>
      <link>https://michalkowol.github.io/posts/2013-12-05-java-with-spring/</link>
      <pubDate>Thu, 05 Dec 2013 00:00:00 +0000</pubDate>
      
      <guid>https://michalkowol.github.io/posts/2013-12-05-java-with-spring/</guid>
      <description>Overview Post bellow refers to the old version of Spring. In modern Spring application you don&amp;rsquo;t need to write xml files. You can do almost everything from java code.
Example interface Fruit { String eat(); String getName(); } interface Peelable { String peel(); } interface PeelableFruit extends Fruit, Peelable { } class Apple implements PeelableFruit { @Override public String peel() { return &amp;quot;peeling &amp;quot; + getName(); } @Override public String eat() { return &amp;quot;omnonnom &amp;quot; + getName(); } @Override public String getName() { return &amp;quot;apple&amp;quot;; } } class Peeler { String peel(Peelable peelable) { return peelable.</description>
    </item>
    
    <item>
      <title>Java Puzzle - initialization order</title>
      <link>https://michalkowol.github.io/posts/2013-11-22-java-puzzle/</link>
      <pubDate>Fri, 22 Nov 2013 00:00:00 +0000</pubDate>
      
      <guid>https://michalkowol.github.io/posts/2013-11-22-java-puzzle/</guid>
      <description>Overview When I applied my first full-time job, a guy during recruitment showed me the following code and asked me what would happen? It supposed to show if I understand initialization order in Java.
Example class ClassMain { private final String mainVar = &amp;quot;Main&amp;quot;; ClassMain() { showMeTheMain(); } protected void showMeTheMain() { System.out.println(mainVar); } } class ClassA extends ClassMain { private String a = &amp;quot;qwerty&amp;quot;; ClassA() { showMeTheMain(); } @Override public void showMeTheMain() { System.</description>
    </item>
    
  </channel>
</rss>