<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Spark on Michał Kowol</title>
    <link>https://michalkowol.github.io/tags/spark/</link>
    <description>Recent content in Spark on Michał Kowol</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 01 Dec 2016 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://michalkowol.github.io/tags/spark/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Simple HTTP servers in Java</title>
      <link>https://michalkowol.github.io/posts/2016-12-01-java-simple-http-servers/</link>
      <pubDate>Thu, 01 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>https://michalkowol.github.io/posts/2016-12-01-java-simple-http-servers/</guid>
      <description>Java build-in Since Java SE 6, there&amp;rsquo;s a builtin HTTP server in Sun Oracle JRE. The com.sun.net.httpserver package summary outlines the involved classes and contains examples.
import com.sun.net.httpserver.HttpExchange; import com.sun.net.httpserver.HttpHandler; import com.sun.net.httpserver.HttpServer; import lombok.SneakyThrows; import java.io.IOException; import java.io.OutputStream; import java.net.InetSocketAddress; public class BootSunHttp { public static void main(String[] args) { new BootSunHttp().bootServer(); } @SneakyThrows private void bootServer() { HttpServer server = HttpServer.create(new InetSocketAddress(8000), 0); server.createContext(&amp;quot;/test&amp;quot;, new SimpleHandler()); server.setExecutor(null); // creates a default executor server.</description>
    </item>
    
  </channel>
</rss>