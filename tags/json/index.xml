<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Json on Michał Kowol</title>
    <link>https://michalkowol.github.io/tags/json/</link>
    <description>Recent content in Json on Michał Kowol</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 23 Jan 2017 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://michalkowol.github.io/tags/json/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>How to deserialize abstract types from JSON using Jackson?</title>
      <link>https://michalkowol.github.io/posts/2017-01-23-jackson/</link>
      <pubDate>Mon, 23 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>https://michalkowol.github.io/posts/2017-01-23-jackson/</guid>
      <description>Overview Sometimes you need deserialize JSON to Java abstract types. Good example is list of animals.
{ &amp;quot;animals&amp;quot;: [ { &amp;quot;name&amp;quot;: &amp;quot;Szarik&amp;quot;, &amp;quot;ageInYears&amp;quot;: 3, &amp;quot;type&amp;quot;: &amp;quot;dog&amp;quot; }, { &amp;quot;name&amp;quot;: &amp;quot;Filemon&amp;quot;, &amp;quot;livesLeft&amp;quot;: 6, &amp;quot;type&amp;quot;: &amp;quot;cat&amp;quot; } ] }  In this case you need to serialize animals to specific types using type property.
Java Data Classes (Lombock) import lombok.Data; interface Animal { } @Data class AnimalsContainer { private final List&amp;lt;Animal&amp;gt; animals = new LinkedList&amp;lt;&amp;gt;(); } @Data class Dog implements Animal { private final String name; private final Integer ageInYears; } @Data class Cat implements Animal { private final String name; private final Integer livesLeft; }  Json Type Info Annotations import com.</description>
    </item>
    
  </channel>
</rss>